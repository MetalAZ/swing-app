# To use this in your application, make sure that this properties file
# is included in your application JAR (e.g. in package `com.myapp.themes`)
# and invoke `FlatLaf.registerCustomDefaultsSource( "com.myapp.themes" );`
# before setting the look and feel.
# https://www.formdev.com/flatlaf/how-to-customize/#application_properties

Component.arc=8
ProgressBar.arc=8
Button.arc=8
TextComponent.arc=8
Component.focusWidth=1
Component.innerFocusWidth=1
ScrollBar.thumbArc=8
ScrollBar.thumbInsets=2,2,2,2

@background=#f1eff3
@foreground=#1e1e1e
@accentColor=#1688ff
@accentBaseColor = #1688ff
@custom.alt.background=#fff
@custom.selection.foreground=#fff

@componentBackground = @custom.alt.background
@menuBackground = @custom.alt.background

Tree.selectionInactiveBackground = fade(@accentBaseColor,60%)
Tree.selectionInactiveForeground = @custom.selection.foreground

TabbedPane.underlineColor = @accentColor
TabbedPane.inactiveUnderlineColor = @accentColor
TabbedPane.selectedBackground = @background

Button.default.focusedBackground = @accentColor
Button.default.focusedForeground = @custom.selection.foreground
Button.default.hoverBackground = darken(@accentColor, 5%)
Button.default.hoverForeground = @custom.selection.foreground
Button.default.pressedBackground = darken(@accentColor, 10%)
Button.default.pressedForeground = @custom.selection.foreground
Button.focusedBackground = @accentColor
Button.focusedForeground = @custom.selection.foreground
Button.hoverBackground = darken(@accentColor, 5%)
Button.hoverForeground = @custom.selection.foreground
Button.pressedBackground = darken(@accentColor, 10%)
Button.pressedForeground = @custom.selection.foreground

ToggleButton.selectedBackground = @accentColor
ToggleButton.selectedForeground = @custom.selection.foreground

Separator.foreground = darken(@background,4%)