<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>swing-app</artifactId>
    <version>1.0.12346</version>

    <repositories>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Set this to the class with the main method for your application -->
        <main-class>com.example.App</main-class>

        <!-- For reading within app -->
        <app.display.name>Swing App</app.display.name>

        <!-- Change your app's name to something interesting... but you might want to avoid spaces
        just to safe for compatibility across operating systems. -->
        <app.name>Swing App</app.name>

        <app.description>Java Swing Example App</app.description>

        <!-- Defines the menu category to list the app under. Separate multiple with a semicolon.
         Example: Utility;TextEditor;Development;IDE; -->
        <app.category>Utility</app.category>

        <app.version>${project.version}</app.version>

        <!-- Email address of the app maintainer -->
        <app.maintainer>someone@example.com</app.maintainer>

        <!-- Copyright line -->
        <app.copyright>Â© 2022 ${app.vendor}</app.copyright>

        <!-- The company or person who created this app -->
        <app.vendor>SomeCompany</app.vendor>

        <!-- Replace this UUID with a custom one for your project. This ID is used by the Windows installer system
       to know that an installer is intended to replace/upgrade an earlier version. The easiest thing to do is
       grab a unique UUID via https://www.uuidgenerator.net -->
        <windows.upgrade.uuid>d5c80fee-157d-11ed-861d-0242ac120002</windows.upgrade.uuid>

        <!-- Empty properties to skip signing by default. Set with the macos-sign Maven profile -->
        <macos.sign></macos.sign>
        <macos.sign.identity></macos.sign.identity>

        <!-- This property is used to specify the modules included in the (custom) JVM image. -->
        <!-- Reminder: javafx.web (the embedded browser component) is not included in this project by default due
        to GitHub template size restrictions. You can download the full SDK from https://openjfx.io -->
        <jvm.modules>java.logging,java.desktop,java.sql</jvm.modules>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.formdev</groupId>
            <artifactId>flatlaf</artifactId>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>com.formdev</groupId>
            <artifactId>flatlaf-intellij-themes</artifactId>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>com.formdev</groupId>
            <artifactId>flatlaf-swingx</artifactId>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>com.formdev</groupId>
            <artifactId>flatlaf-extras</artifactId>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>org.swinglabs.swingx</groupId>
            <artifactId>swingx-all</artifactId>
            <version>1.6.5-1</version>
        </dependency>
        <dependency>
            <groupId>com.github.akman</groupId>
            <artifactId>jpackage-maven-plugin</artifactId>
            <version>0.1.5</version>
            <type>maven-plugin</type>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>com.github.Dansoftowner</groupId>
            <artifactId>jSystemThemeDetector</artifactId>
            <version>3.8</version>
        </dependency>
        <dependency>
            <groupId>com.miglayout</groupId>
            <artifactId>miglayout-swing</artifactId>
            <version>11.0</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>versions-maven-plugin</artifactId>
            <version>2.11.0</version>
            <type>maven-plugin</type>
        </dependency>
        <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.1.0</version>
            <type>maven-plugin</type>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.18.0</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.11</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-install-plugin</artifactId>
            <version>3.0.1</version>
            <type>maven-plugin</type>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.2.2</version>
            <type>maven-plugin</type>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.3.0</version>
            <type>maven-plugin</type>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                 properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <!-- This is an app, so we don't want to install it in the local Maven repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- This copies all the jar files declared by the Maven build into a single directory.
                        This makes it easy to assemble the final installer package -->
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Put the application jar generated by the project into the dependency folder - the default folder
                for the maven-dependency-plugin output. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>${main-class}</mainClass>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.5.3</version>
                <dependencies>
                    <dependency>
                        <groupId>com.guardsquare</groupId>
                        <artifactId>proguard-base</artifactId>
                        <version>7.2.2</version>
                        <scope>runtime</scope>
                    </dependency>
                    <dependency>
                        <groupId>com.guardsquare</groupId>
                        <artifactId>proguard-core</artifactId>
                        <version>9.0.1</version>
                        <scope>runtime</scope>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>shaded-small</id>
                        <phase>package</phase>
                        <goals>
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <proguardVersion>7.2.2</proguardVersion>
                    <obfuscate>true</obfuscate>
                    <attach>false</attach>
                    <options>
                        <option>-dontnote</option>
                        <option>-libraryjars ${java.home}/jmods</option>
                        <option>-optimizationpasses 5</option>
                        <option>-overloadaggressively</option>
                        <option>-allowaccessmodification</option>
                        <option>-repackageclasses 'hidden'</option>
                        <option>-ignorewarnings</option>
                        <option>-keep public class ${main-class} { public static void main(java.lang.String[]); }
                        </option>
                        <option>
                            -keep public class com.example.theme.custom.**{ *; }
                        </option>
                    </options>
                    <injar>dependency/${project.build.finalName}.jar</injar>
                    <outjar>dependency/${project.build.finalName}-pg.jar</outjar>
                    <includeDependency>true</includeDependency>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <delete file="target/dependency/${project.build.finalName}.jar"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <version>1.0.34</version>
                <executions>
                    <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
                    this project with the JDK modules. -->
                    <execution>
                        <id>jlink</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                            <addModules>${jvm.modules}</addModules>
                            <output>${project.build.directory}/jvm-image</output>
                            <args>
                                <arg>--strip-native-commands</arg>
                                <arg>--no-header-files</arg>
                                <arg>--strip-debug</arg>
                                <arg>--no-man-pages</arg>
                                <arg>--compress=2</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- The command that actually generates the installer. The options for each platform
                    are found the /src/packaging directory. These files are copied into the target directory by
                    the Maven resources plugin, which does the filtering to replace the original values with
                    the actual Maven properties.
                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jpackage</id>
                        <phase>install</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                            <args>@${project.build.directory}/packaging/${platform}-jpackage.txt</args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.github.akman</groupId>
                    <artifactId>jpackage-maven-plugin</artifactId>
                    <version>0.1.3</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.9.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M5</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <reporting>
        <plugins>
            <!-- http://mojo.codehaus.org/versions-maven-plugin/version-rules.html -->
            <!-- This plugin is a utility to find outdated dependencies in your project. Just run mvn site and
            the resulting HTML reports in target/site will let you know what plugins and dependencies are out of date.
             -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.11.0</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
                <configuration>
                    <processDependencyManagementTransitive>false</processDependencyManagementTransitive>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <!-- We use the built-in Maven profile activation system to set the platform property.
        These properties are then use to build the directory paths to the platform specific resources.
        It would be great if Maven automatically added the os family as a property by default
         -->
        <profile>
            <id>unix-active</id>
            <activation>
                <os>
                    <family>unix</family>
                </os>
                <property>
                    <name>!appimage</name>
                </property>
            </activation>
            <properties>
                <platform>linux</platform>
            </properties>
        </profile>
        <profile>
            <id>app-image-linux-active</id>
            <activation>
                <property>
                    <name>appimage</name>
                    <value>linux</value>
                </property>
            </activation>
            <properties>
                <platform>appimage-linux</platform>
            </properties>
        </profile>
        <profile>
            <id>app-image-window-active</id>
            <activation>
                <property>
                    <name>appimage</name>
                    <value>win</value>
                </property>
            </activation>
            <properties>
                <platform>appimage-win</platform>
            </properties>
        </profile>
        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
                <property>
                    <name>!appimage</name>
                </property>
            </activation>
            <properties>
                <platform>win</platform>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <!-- This adds a "launch on finish" to the Windows msi installer. This just tweaks the Windows
                         installer package to run the executable after the installer runs, simplifying the user experience.
                          If you don't want this behavior, just delete this plug execution. -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <phase>install</phase>
                                <id>add-launch-to-msi</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>cscript</executable>
                            <outputFile>${project.build.directory}/msi-result.log</outputFile>
                            <workingDirectory>${project.build.directory}</workingDirectory>
                            <arguments>
                                <argument>${project.build.directory}/packaging/add-launch-to-msi.js</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>mac-active</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
                <property>
                    <name>!appimage</name>
                </property>
            </activation>
            <properties>
                <platform>mac</platform>
            </properties>
        </profile>
        <profile>
            <id>app-image-mac-active</id>
            <activation>
                <property>
                    <name>appimage</name>
                    <value>mac</value>
                </property>
            </activation>
            <properties>
                <platform>appimage-mac</platform>
            </properties>
        </profile>
    </profiles>
</project>
